name: Deploy Backend

on:
  push:
    branches:
      - production

jobs:
  deploy-backend:
    name: Deploy Backend to VPS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Configure SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Test server connectivity
        run: |
          echo "Testing connectivity to server..."
          ping -c 4 ${{ secrets.SSH_HOST }}

      - name: SSH into VPS and create .env
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          mkdir -p ~/Ma_Cave/back
          echo "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}" > ~/Ma_Cave/back/.env
          echo "MYSQL_DATABASE=${MYSQL_DATABASE}" >> ~/Ma_Cave/back/.env
          echo "MYSQL_USER=${MYSQL_USER}" >> ~/Ma_Cave/back/.env
          echo "MYSQL_PASSWORD=${MYSQL_PASSWORD}" >> ~/Ma_Cave/back/.env
          echo "FLASK_ENV=production" >> ~/Ma_Cave/back/.env
          EOF

      - name: Deploy backend with Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          cd ~/Ma_Cave/back
          docker compose --env-file .env -f docker-compose-prod.yml pull
          docker compose --env-file .env -f docker-compose-prod.yml up --build -d
          EOF

      - name: Debug SSH setup (optional)
        if: failure()
        run: |
          ls -la ~/.ssh
          cat ~/.ssh/known_hosts

      - name: Verify deployment (optional)
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          docker ps
          EOF

    env:
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
      MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
      MYSQL_USER: ${{ secrets.MYSQL_USER }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}